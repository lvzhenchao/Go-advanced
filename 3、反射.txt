
1、概念
    在运行时更新变量和检查他们的值、调用它们的方法
    指程序在运行的过程中，获取对象的类型信息和内存结构

2、常用场景
    1>对于一个函数，不知道传给你的参数类型是什么，可能是没约定好；也可能是传入的类型很多，这些类型并不能统一表示
    ；这时反射就会用上了
    2>有时候需要根据某些条件决定调用哪个函数，比如根据用户的输入来决定。这时就需要对函数和函数的参数进行反射，在运
    行期间动态地执行函数

3、缺点
    可读性差
    对于错误，反射代码是无能为力
    影响性能

4、实现
    反射就是通过接口的类型信息实现的，建立在类型的基础上
    interface空接口

    reflect包
    reflect包实现了运行时反射，允许程序操作任意类型的对象。典型用法是用静态类型interface{}保存一个值，
    通过调用TypeOf获取其动态类型信息，该函数返回一个Type类型值。调用ValueOf函数返回一个Value类型值，
    该值代表运行时的数据。Zero接受一个Type类型参数并返回一个代表该类型零值的Value类型值

    最重要的两个类型
    type Type interface {
        ...
    }
    type Value struct {
        // 内含隐藏或非导出字段
    }

5、引申概念
    Go语言的类型
        变量包括type、value两部分
        type包括static type和concrete type。
            static type 是看的见的类型 int、string等
            concrete type 是runtime系统看见的类型
        类型断言能否成功，取决于变量的concrete type;
            如果一个reader变量的concrete type也实现了write方法的话，也可以被类型断言为writer

    Go语言的反射就是建立在类型之上的，反射主要与Golang的interface类型相关（type是concrete type）
    只有interface类型才有反射一说


    每个interface变量都有一个对应pair, pair中记录了实际变量的值和类型（value, type）
        一个interface{}类型的变量包含了2个指针，一个指向值的类型【concrete type】,一个指向实际值【value】

6、使用
    reflect包
        基本功能
            TypeOf
            ValueOf

        1>func ValueOf(i interface{}) Value
            用来获取输入参数接口中的数据的值，如果接口为空则返回0

        2>func TypeOf(i interface{}) Type
            用来获取输入参数接口中的值的类型，如果接口为空则返回nil

    reflect.TypeOf()来获取pair中type
    reflect.ValueOf()来获取pair中value


















